#include <f32c_VGATextConsole.h>

//void drawRLE();

//static inline void plot(int x, int y, int color)
//{
//  uint32_t off = (y * FB_WIDTH) + x;
//  if (off < sizeof (fb))
//    fb[off] = color;
//}

void wait(int secs)
{
	while (secs--)
	{
		vga.SetPos(vga.GetTextDisplayWidth()-10, vga.GetTextDisplayHeight()-1);
		vga.print("Wait... ");
		vga.print(secs, DEC);
		vga.print(" ");
		delay(1000);
	}
}

void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);
  while (!Serial)
    ;
  delay(2000);	// a bit of time to connect terminal after upload

  Serial.println("f32c_VGAConsoleTest running...");

  if (!(VGAText_GetFeatureConfigFlags() & VGATEXT_FEATURE_VIDEO_GEN))
  {
	Serial.println("Video generation not detected, halting.");
	while (true)
		;
  }
  Serial.println("Initializing VGATextConsole...");

  vga.Setup();
  vga.SetColor(0x17);
  vga.Clear();
  vga.DisableTextCursor();

  Serial.println("f32c_VGAConsoleTest feature test example.\n");
  vga.println("f32c_VGAConsoleTest feature test example.\n");

  Serial.print("CONFIG register   : 0x");
  Serial.println(((volatile uint32_t *)IO_VGATEXT_CONFIG)[0], HEX);
  vga.print("CONFIG register   : 0x");
  vga.PrintHex(((volatile uint32_t *)IO_VGATEXT_CONFIG)[0]);
  vga.print("\n");

  Serial.print("CONFIG2 register  : 0x");
  Serial.println(((volatile uint32_t *)IO_VGATEXT_CONFIG2)[0], HEX);
  vga.print("CONFIG2 register  : 0x");
  vga.PrintHex(((volatile uint32_t *)IO_VGATEXT_CONFIG2)[0]);
  vga.print("\n");

  Serial.print("CURSOR register   : 0x");
  Serial.println(((volatile uint32_t *)IO_VGATEXT_CURSOR)[0], HEX);
  vga.print("CURSOR register   : 0x");
  vga.PrintHex(((volatile uint32_t *)IO_VGATEXT_CURSOR)[0]);
  vga.print("\n");

  Serial.print("TEXT_ADDR register: 0x");
  Serial.println(((volatile uint32_t *)IO_VGATEXT_TEXT_ADDR)[0], HEX);
  vga.print("TEXT_ADDR register: 0x");
  vga.PrintHex(((volatile uint32_t *)IO_VGATEXT_TEXT_ADDR)[0]);
  vga.print("\n");

  Serial.print("BMAP_ADDR register: 0x");
  Serial.println(((volatile uint32_t *)IO_VGATEXT_BMAP_ADDR)[0], HEX);
  vga.print("BMAP_ADDR register: 0x");
  vga.PrintHex(((volatile uint32_t *)IO_VGATEXT_BMAP_ADDR)[0]);
  vga.print("\n");

  Serial.println("\nVGA_textmode Features Configured:\n");
  vga.println("\nVGA_textmode Features Configured:\n");

  Serial.print("Video Generation:                 ");
  Serial.println(vga.IsDisplayConfigured() ? "Yes" : "No");
  vga.print("Video Generation:                 ");
  vga.println(vga.IsDisplayConfigured() ? "Yes" : "No");

  Serial.print("Screen size:                      ");
  Serial.print(vga.GetDisplayWidth());
  Serial.print("x");
  Serial.println(vga.GetDisplayHeight());
  vga.print("Screen size:                      ");
  vga.print(vga.GetDisplayWidth());
  vga.print("x");
  vga.println(vga.GetDisplayHeight());

  Serial.print("BRAM memory:                      ");
  Serial.print(vga.GetBRAMSize());
  Serial.println(" KB");
  vga.print("BRAM memory:                      ");
  vga.print(vga.GetBRAMSize());
  vga.println(" KB");
  
  Serial.print("BRAM read register interface:     ");
  Serial.println(vga.IsBRAMRegisterReadConfigured() ? "Yes" : "No");
  vga.print("BRAM read register interface:     ");
  vga.println(vga.IsBRAMRegisterReadConfigured() ? "Yes" : "No");

  Serial.print("Text Generation:                  ");
  Serial.println(vga.IsTextConfigured() ? "Yes" : "No");
  vga.print("Text Generation:                  ");
  vga.println(vga.IsTextConfigured() ? "Yes" : "No");

  if (vga.IsTextConfigured())
  {
	Serial.print("Text Color Attribute Byte:        ");
	Serial.println(!vga.IsMonochromeConfigured() ? "Yes" : "No");
	vga.print("Text Color Attribute Byte:        ");
	vga.println(!vga.IsMonochromeConfigured() ? "Yes" : "No");

	Serial.print("Text screen size                  ");
	Serial.print(vga.GetTextDisplayWidth());
	Serial.print("x");
	Serial.print(vga.GetTextDisplayHeight());
	if (vga.IsFineScrollConfigured())
	{
		Serial.print(" (");
		Serial.print(vga.GetTextDisplayWidth() + (vga.IsMonochromeConfigured() ? 4 : 2));
		Serial.print("x");
		Serial.print(vga.GetTextDisplayHeight() + 1);
		Serial.print(" with fine scroll)");
	}
	Serial.println("");
	vga.print("Text screen size:                 ");
	vga.print(vga.GetTextDisplayWidth());
	vga.print("x");
	vga.print(vga.GetTextDisplayHeight());
	if (vga.IsFineScrollConfigured())
	{
		vga.print(" (");
		vga.print(vga.GetTextDisplayWidth() + (vga.IsMonochromeConfigured() ? 4 : 2));
		vga.print("x");
		vga.print(vga.GetTextDisplayHeight() + 1);
		vga.print(" with fine scroll)");
	}
	vga.println("");

	Serial.print("Text Address:                     0x");
	Serial.println((uint32_t)vga.GetTextAddress(), HEX);
	vga.print("Text Address:                     0x");
	vga.PrintHex((uint32_t)vga.GetTextAddress());
	vga.println("");

	Serial.print("Font:                             ");
	Serial.print(vga.GetFontWidth());
	Serial.print("x");
	Serial.print(vga.GetFontHeight());
	Serial.print(" ");
	Serial.print(vga.GetFontCharacters());
	Serial.print(" chars (");
	Serial.print((vga.GetFontHeight() * vga.GetFontCharacters())/1024);
	Serial.println(" KB)");
	vga.print("Font:                             ");
	vga.print(vga.GetFontWidth());
	vga.print("x");
	vga.print(vga.GetFontHeight());
	vga.print(" ");
	vga.print(vga.GetFontCharacters());
	vga.print(" chars (");
	vga.print((vga.GetFontHeight() * vga.GetFontCharacters())/1024);
	vga.println(" KB)");

	Serial.print("Font Address:                     0x");
	Serial.println((uint32_t)vga.GetFontAddress(), HEX);
	vga.print("Font Address:                     0x");
	vga.PrintHex((uint32_t)vga.GetFontAddress());
	vga.println("");

	Serial.print("Font cell height:                 ");
	Serial.println((uint32_t)VGAText_GetTextCellHeight());
	vga.print("Font cell height                  ");
	vga.println((uint32_t)VGAText_GetTextCellHeight());
	
	Serial.print("Fine scroll:                      ");
	Serial.println(vga.IsFineScrollConfigured() ? "Yes" : "No");
	vga.print("Fine scroll:                      ");
	vga.println(vga.IsFineScrollConfigured() ? "Yes" : "No");

	Serial.print("Cursor Generation:                ");
	Serial.println(vga.IsCursorConfigured() ? "Yes" : "No");
	vga.print("Cursor Generation:                ");
	vga.println(vga.IsCursorConfigured() ? "Yes" : "No");

	Serial.print("Cursor Blink Generation:          ");
	Serial.println(vga.IsCursorBlinkConfigured() ? "Yes" : "No");
	vga.print("Cursor Blink Generation:          ");
	vga.println(vga.IsCursorBlinkConfigured() ? "Yes" : "No");
  }
  Serial.print("16 Color Palette:                 ");
  Serial.println(vga.IsPaletteConfigured() ? "Yes" : "No");
  vga.print("16 Color Palette:                 ");
  vga.println(vga.IsPaletteConfigured() ? "Yes" : "No");

  Serial.print("Bitmap Generation:                ");
  Serial.println(vga.IsBitmapConfigured() ? "Yes" : "No");
  vga.print("Bitmap Generation:                ");
  vga.println(vga.IsBitmapConfigured() ? "Yes" : "No");

  if (vga.IsBitmapConfigured())
  {
    Serial.print("Bitmap Address:                   0x");
    Serial.println((uint32_t)vga.GetBitmapAddress(), HEX);
    vga.print("Bitmap Address:                   0x");
    vga.PrintHex((uint32_t)vga.GetBitmapAddress());
    vga.println("");
  }

  wait(10);
  memcpy(vga.GetTextAddress(), (void *)0x80000000, vga.width * vga.height * (vga.IsMonochromeConfigured() ? 1 : 2));
  vga.SetPos(15, 10);
  vga.print("(Set to garbage on purpose to see full characters)");
  
  int fs = 0;
  while (fs < 16)
  {
	fs++;
    while (!VGAText_GetVerticalBlank())
	  ;
	VGAText_SetFineScroll(fs & 0x7);
	vga.SetPos(vga.GetTextDisplayWidth()-9, vga.GetTextDisplayHeight()-1);
	vga.print("scrollx=");
	vga.print(fs & 0x7, HEX);
    while (VGAText_GetVerticalBlank())
	  ;
	delay(1000);
  }

  int spam = 0;
  vga.SetSmoothScrollSpeed(1);
  while (spam++ < 0x10)
  {
	  vga.print("Some random text printed to test smooth scrolling at speed 1.     ");
  }
  spam = 0;
  vga.SetSmoothScrollSpeed(2);
  while (spam++ < 0x20)
  {
	  vga.print("Some more random text printed to test smooth scrolling at speed 2.     ");
  };
  spam = 0;
  vga.SetSmoothScrollSpeed(4);
  while (spam++ < 0x30)
  {
	  vga.print("Utter gibberish printed to test smooth scrolling at speed 4.     ");
  };
  spam = 0;
  vga.SetSmoothScrollSpeed(8);
  while (spam++ < 0x40)
  {
	  vga.print("Super speed text spam as a test of smooth scrolling at speed 8.     ");
  };

  if (vga.color_flag)
  {
	vga.print("16-");
	vga.SetColor(0x2F);
	vga.print("c");
	vga.SetColor(0x3F);
	vga.print("o");
	vga.SetColor(0x4F);
	vga.print("l");
	vga.SetColor(0x9F);
	vga.print("o");
	vga.SetColor(0xAF);
	vga.print("r");
	vga.SetColor(0x1F);
	vga.println(" mode");
  }
  else
  {
	vga.println("2-color mode");
  }
  vga.println();

#if 0
  if (false)
  {
//	  vga.SetBitmapAddress(fb);
	  vga.SetBitmapColor(0x108010);
	  vga.EnableBitmap();
	  drawRLE();
	  vga.println("RLE rendered...");
	  for (int x = 0; x < 256; x++)
	  {
		for (int y = 0; y < 8; y++)
		{
		  plot(64+(x*2), 424+y, (x&0xfc));
		  plot(65+(x*2), 424+y, (x&0xfc));

		  plot(64+(x*2), 432+y, (x&0xfc)|1);
		  plot(65+(x*2), 432+y, (x&0xfc)|1);

		  plot(64+(x*2), 440+y, (x&0xfc)|2);
		  plot(65+(x*2), 440+y, (x&0xfc)|2);

		  plot(64+(x*2), 448+y, (x&0xfc)|3);
		  plot(65+(x*2), 448+y, (x&0xfc)|3);
		}
    }
  }
#endif

  vga.println("");

  vga.SetColor(0x17);
  vga.println("Hi Davor!");
  vga.println("");
  vga.SetColor(0x19);
  vga.print("Xark");
  vga.SetColor(0x17);
  vga.println(" here.");
  vga.print("This is VGA_textmode 640x480 HDMI running on f32c miniSpartan6+");
  vga.SetColor(0x1F);
  vga.println(" :-)");
  vga.println("");
  vga.SetColor(0x1A);
  vga.println("Bitmap mode with FIFO achieved! :-)");
  vga.println("");
  vga.SetColor(0x1F);
  vga.println("2, 4 or 16-color with optional palette and 8-bit (RRRGGGBB) achieved!");
  vga.println("");
  vga.SetColor(0x1e);
  vga.println("Text+color with FIFO achieved (with help from Davor)! :-)");
  vga.SetColor(0x1F);
  vga.println("Vertical smooth scroll, new register interface etc. achieved!");
  vga.println("");
  
  for (int i = 0; i < 10; i++)
	vga.println("");

#if 0	
  vga.SetColor(0x00);
  vga.SetPos(7, 26);
  vga.print("                                                                  ");
  vga.SetPos(7, 27);
  vga.print("                                                                  ");
  vga.SetPos(7, 28);
  vga.print("                                                                  ");
  vga.SetPos(28, 29);
  vga.SetColor(0x1f);
  vga.print("256 direct-color RRRGGGBB");
#endif
}

uint32_t cnt;
void loop() {

  // put your main code here, to run repeatedly: ... or not
}


#if 0	// bitmap disabled for now
// Compressed RLE data
const uint8_t HaDLogo[] =
{
	0x00, 0x82, 0x81, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82,
	0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e,
	0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02,
	0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82,
	0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e,
	0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02,
	0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82,
	0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e,
	0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02,
	0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82,
	0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e,
	0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02,
	0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82,
	0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e,
	0x02, 0x80, 0xae, 0x13, 0x80, 0xfb, 0x13, 0x80, 0xaf, 0x02, 0x80, 0xac, 0x19, 0x80, 0xf3, 0x19,
	0x80, 0xad, 0x02, 0x80, 0xad, 0x1b, 0x80, 0xed, 0x1b, 0x80, 0xae, 0x02, 0x80, 0xae, 0x1c, 0x80,
	0xe9, 0x1c, 0x80, 0xaf, 0x02, 0x80, 0xaf, 0x1d, 0x80, 0xe5, 0x1d, 0x80, 0xb0, 0x02, 0x80, 0xb0,
	0x1e, 0x80, 0xe1, 0x1e, 0x80, 0xb1, 0x02, 0x80, 0xb1, 0x1f, 0x80, 0xdd, 0x1f, 0x80, 0xb2, 0x02,
	0x80, 0xb2, 0x1f, 0x80, 0xdb, 0x1f, 0x80, 0xb3, 0x02, 0x80, 0xb3, 0x20, 0x80, 0xd7, 0x20, 0x80,
	0xb4, 0x02, 0x80, 0xb5, 0x1f, 0x80, 0xd5, 0x1f, 0x80, 0xb6, 0x02, 0x80, 0xb6, 0x1f, 0x80, 0xd3,
	0x1f, 0x80, 0xb7, 0x02, 0x80, 0xb7, 0x20, 0x80, 0xcf, 0x20, 0x80, 0xb8, 0x02, 0x80, 0xb8, 0x20,
	0x80, 0xcd, 0x20, 0x80, 0xb9, 0x02, 0x80, 0xb9, 0x20, 0x80, 0xcb, 0x20, 0x80, 0xba, 0x02, 0x80,
	0xba, 0x20, 0x80, 0xc9, 0x20, 0x80, 0xbb, 0x02, 0x80, 0xbb, 0x1f, 0x80, 0xc9, 0x1f, 0x80, 0xbc,
	0x02, 0x80, 0xbc, 0x1f, 0x80, 0xc7, 0x1f, 0x80, 0xbd, 0x02, 0x80, 0xbe, 0x1e, 0x80, 0xc5, 0x1e,
	0x80, 0xbf, 0x02, 0x80, 0xbf, 0x1e, 0x80, 0xc3, 0x1e, 0x80, 0xc0, 0x02, 0x80, 0xc0, 0x1e, 0x80,
	0xc1, 0x1e, 0x80, 0xc1, 0x02, 0x80, 0xc1, 0x1d, 0x80, 0xc1, 0x1d, 0x80, 0xc2, 0x02, 0x80, 0xc2,
	0x1d, 0x80, 0xbf, 0x1d, 0x80, 0xc3, 0x02, 0x80, 0xc3, 0x1c, 0x80, 0xbf, 0x1c, 0x80, 0xc4, 0x02,
	0x80, 0xc4, 0x1c, 0x80, 0xbd, 0x1c, 0x80, 0xc5, 0x02, 0x80, 0xc5, 0x1c, 0x80, 0xbb, 0x1c, 0x80,
	0xc6, 0x02, 0x80, 0xc7, 0x1a, 0x80, 0xbb, 0x1a, 0x80, 0xc8, 0x02, 0x80, 0xc8, 0x1a, 0x80, 0xb9,
	0x1a, 0x80, 0xc9, 0x02, 0x80, 0xc8, 0x1a, 0x80, 0xb9, 0x1a, 0x80, 0xc9, 0x02, 0x80, 0xc7, 0x1b,
	0x80, 0xb9, 0x1b, 0x80, 0xc8, 0x02, 0x80, 0xc6, 0x1d, 0x80, 0xb7, 0x1d, 0x80, 0xc7, 0x02, 0x80,
	0xc5, 0x1e, 0x80, 0xb7, 0x1e, 0x80, 0xc6, 0x02, 0x80, 0xc4, 0x1f, 0x80, 0xb7, 0x1f, 0x80, 0xc5,
	0x02, 0x80, 0xc3, 0x21, 0x80, 0xb5, 0x21, 0x80, 0xc4, 0x02, 0x80, 0xc2, 0x22, 0x80, 0xb5, 0x22,
	0x80, 0xc3, 0x02, 0x80, 0xc1, 0x23, 0x80, 0xb5, 0x23, 0x80, 0xc2, 0x02, 0x80, 0xc0, 0x25, 0x80,
	0xb3, 0x25, 0x80, 0xc1, 0x02, 0x80, 0xbf, 0x26, 0x80, 0xb3, 0x26, 0x80, 0xc0, 0x02, 0x80, 0x8a,
	0x01, 0x34, 0x26, 0x80, 0xb3, 0x26, 0x34, 0x01, 0x80, 0x8b, 0x02, 0x80, 0x8a, 0x02, 0x32, 0x27,
	0x80, 0xb3, 0x27, 0x32, 0x02, 0x80, 0x8b, 0x02, 0x80, 0x8a, 0x03, 0x30, 0x28, 0x80, 0xb3, 0x28,
	0x30, 0x03, 0x80, 0x8b, 0x02, 0x80, 0x8a, 0x05, 0x2d, 0x29, 0x80, 0xb3, 0x29, 0x2d, 0x05, 0x80,
	0x8b, 0x02, 0x80, 0x89, 0x07, 0x2b, 0x2b, 0x80, 0xb1, 0x2b, 0x2b, 0x07, 0x80, 0x8a, 0x02, 0x80,
	0x89, 0x08, 0x29, 0x2c, 0x80, 0xb1, 0x2c, 0x29, 0x08, 0x80, 0x8a, 0x02, 0x80, 0x89, 0x09, 0x27,
	0x2d, 0x80, 0xb1, 0x2d, 0x27, 0x09, 0x80, 0x8a, 0x02, 0x80, 0x89, 0x0a, 0x25, 0x2e, 0x80, 0xb1,
	0x2e, 0x25, 0x0a, 0x80, 0x8a, 0x02, 0x80, 0x89, 0x0b, 0x23, 0x2f, 0x80, 0xb1, 0x2f, 0x23, 0x0b,
	0x80, 0x8a, 0x02, 0x80, 0x89, 0x0c, 0x21, 0x30, 0x80, 0xb1, 0x30, 0x21, 0x0c, 0x80, 0x8a, 0x02,
	0x80, 0x89, 0x0d, 0x20, 0x30, 0x80, 0xb1, 0x30, 0x1f, 0x0e, 0x80, 0x8a, 0x02, 0x80, 0x89, 0x0f,
	0x1d, 0x31, 0x80, 0xb1, 0x31, 0x1d, 0x0f, 0x80, 0x8a, 0x02, 0x80, 0x89, 0x10, 0x1b, 0x32, 0x80,
	0xb1, 0x32, 0x1b, 0x10, 0x80, 0x8a, 0x02, 0x80, 0x8a, 0x10, 0x19, 0x32, 0x80, 0xb3, 0x32, 0x19,
	0x10, 0x80, 0x8b, 0x02, 0x80, 0x8a, 0x11, 0x17, 0x33, 0x80, 0xb3, 0x33, 0x17, 0x11, 0x80, 0x8b,
	0x02, 0x80, 0x8a, 0x12, 0x15, 0x34, 0x80, 0xb3, 0x34, 0x15, 0x12, 0x80, 0x8b, 0x02, 0x80, 0x8a,
	0x13, 0x13, 0x36, 0x80, 0xb1, 0x36, 0x13, 0x13, 0x80, 0x8b, 0x02, 0x80, 0x8a, 0x14, 0x11, 0x39,
	0x80, 0xad, 0x39, 0x11, 0x14, 0x80, 0x8b, 0x02, 0x80, 0x8a, 0x16, 0x0e, 0x3b, 0x80, 0xab, 0x3b,
	0x0e, 0x16, 0x80, 0x8b, 0x02, 0x80, 0x8b, 0x16, 0x0c, 0x3d, 0x80, 0xa9, 0x3d, 0x0c, 0x16, 0x80,
	0x8c, 0x02, 0x80, 0x8b, 0x17, 0x0b, 0x3e, 0x80, 0xa7, 0x3e, 0x0b, 0x17, 0x80, 0x8c, 0x02, 0x80,
	0x8b, 0x18, 0x09, 0x40, 0x80, 0xa5, 0x40, 0x09, 0x18, 0x80, 0x8c, 0x02, 0x80, 0x8b, 0x19, 0x07,
	0x42, 0x80, 0xa3, 0x42, 0x07, 0x19, 0x80, 0x8c, 0x02, 0x80, 0x8c, 0x19, 0x05, 0x44, 0x80, 0xa1,
	0x44, 0x05, 0x19, 0x80, 0x8d, 0x02, 0x80, 0x8c, 0x1a, 0x03, 0x46, 0x80, 0x9f, 0x46, 0x03, 0x1a,
	0x80, 0x8d, 0x02, 0x80, 0x8d, 0x1a, 0x01, 0x49, 0x80, 0x9b, 0x49, 0x01, 0x1a, 0x80, 0x8e, 0x02,
	0x80, 0x8d, 0x65, 0x80, 0x99, 0x65, 0x80, 0x8e, 0x02, 0x80, 0x8d, 0x66, 0x80, 0x97, 0x66, 0x80,
	0x8e, 0x02, 0x80, 0x8e, 0x66, 0x80, 0x95, 0x66, 0x80, 0x8f, 0x02, 0x80, 0x8e, 0x67, 0x80, 0x93,
	0x67, 0x80, 0x8f, 0x02, 0x80, 0x8f, 0x67, 0x80, 0x91, 0x67, 0x80, 0x90, 0x02, 0x80, 0x8f, 0x68,
	0x80, 0x8f, 0x68, 0x80, 0x90, 0x02, 0x80, 0x90, 0x68, 0x80, 0x8d, 0x68, 0x80, 0x91, 0x02, 0x80,
	0x91, 0x69, 0x80, 0x89, 0x69, 0x80, 0x92, 0x02, 0x80, 0x91, 0x6a, 0x80, 0x87, 0x6a, 0x80, 0x92,
	0x02, 0x80, 0x92, 0x6a, 0x80, 0x85, 0x6a, 0x80, 0x93, 0x02, 0x80, 0x93, 0x6a, 0x80, 0x83, 0x6a,
	0x80, 0x94, 0x02, 0x80, 0x94, 0x6a, 0x37, 0x12, 0x38, 0x6a, 0x80, 0x95, 0x02, 0x80, 0x94, 0x6b,
	0x30, 0x1f, 0x30, 0x6b, 0x80, 0x95, 0x02, 0x80, 0x95, 0x6b, 0x2b, 0x27, 0x2b, 0x6b, 0x80, 0x96,
	0x02, 0x80, 0x96, 0x6c, 0x25, 0x2f, 0x25, 0x6c, 0x80, 0x97, 0x02, 0x80, 0x97, 0x6c, 0x21, 0x35,
	0x21, 0x6c, 0x80, 0x98, 0x02, 0x80, 0x98, 0x6c, 0x1d, 0x3b, 0x1d, 0x6c, 0x80, 0x99, 0x02, 0x80,
	0x99, 0x6c, 0x1a, 0x3f, 0x1a, 0x6c, 0x80, 0x9a, 0x02, 0x80, 0x9a, 0x6c, 0x17, 0x43, 0x17, 0x6c,
	0x80, 0x9b, 0x02, 0x80, 0x9c, 0x6b, 0x14, 0x47, 0x14, 0x6b, 0x80, 0x9d, 0x02, 0x80, 0x9d, 0x6b,
	0x11, 0x4b, 0x11, 0x6b, 0x80, 0x9e, 0x02, 0x80, 0x9f, 0x6a, 0x0e, 0x4f, 0x0e, 0x6a, 0x80, 0xa0,
	0x02, 0x80, 0xa0, 0x68, 0x0d, 0x53, 0x0d, 0x68, 0x80, 0xa1, 0x02, 0x80, 0xa2, 0x64, 0x0e, 0x55,
	0x0e, 0x64, 0x80, 0xa3, 0x02, 0x80, 0xa4, 0x61, 0x0d, 0x59, 0x0d, 0x61, 0x80, 0xa5, 0x02, 0x80,
	0xa6, 0x5e, 0x0d, 0x5b, 0x0d, 0x5d, 0x80, 0xa8, 0x02, 0x80, 0xa9, 0x5a, 0x0c, 0x5f, 0x0c, 0x5a,
	0x80, 0xaa, 0x02, 0x80, 0xad, 0x15, 0x04, 0x3c, 0x0c, 0x61, 0x0c, 0x3c, 0x04, 0x15, 0x80, 0xae,
	0x02, 0x80, 0xb2, 0x0b, 0x0b, 0x39, 0x0c, 0x63, 0x0c, 0x39, 0x0b, 0x0b, 0x80, 0xb3, 0x02, 0x80,
	0xc9, 0x37, 0x0b, 0x67, 0x0b, 0x37, 0x80, 0xca, 0x02, 0x80, 0xca, 0x35, 0x0b, 0x69, 0x0b, 0x35,
	0x80, 0xcb, 0x02, 0x80, 0xcb, 0x33, 0x0b, 0x6b, 0x0b, 0x33, 0x80, 0xcc, 0x02, 0x80, 0xcc, 0x31,
	0x0b, 0x6d, 0x0b, 0x31, 0x80, 0xcd, 0x02, 0x80, 0xcd, 0x2f, 0x0b, 0x6f, 0x0b, 0x2f, 0x80, 0xce,
	0x02, 0x80, 0xce, 0x2d, 0x0b, 0x71, 0x0b, 0x2d, 0x80, 0xcf, 0x02, 0x80, 0xd0, 0x2a, 0x0b, 0x73,
	0x0b, 0x2a, 0x80, 0xd1, 0x02, 0x80, 0xd1, 0x28, 0x0b, 0x75, 0x0b, 0x28, 0x80, 0xd2, 0x02, 0x80,
	0xd2, 0x27, 0x0a, 0x77, 0x0a, 0x27, 0x80, 0xd3, 0x02, 0x80, 0xd3, 0x25, 0x0a, 0x79, 0x0a, 0x25,
	0x80, 0xd4, 0x02, 0x80, 0xd4, 0x23, 0x0a, 0x7b, 0x0a, 0x23, 0x80, 0xd5, 0x02, 0x80, 0xd5, 0x21,
	0x0a, 0x7d, 0x0a, 0x21, 0x80, 0xd6, 0x02, 0x80, 0xd6, 0x20, 0x09, 0x7f, 0x09, 0x20, 0x80, 0xd7,
	0x02, 0x80, 0xd7, 0x1e, 0x09, 0x80, 0x81, 0x09, 0x1e, 0x80, 0xd8, 0x02, 0x80, 0xd9, 0x1b, 0x0a,
	0x80, 0x81, 0x0a, 0x1b, 0x80, 0xda, 0x02, 0x80, 0xda, 0x19, 0x0a, 0x80, 0x83, 0x0a, 0x19, 0x80,
	0xdb, 0x02, 0x80, 0xdb, 0x18, 0x09, 0x80, 0x85, 0x09, 0x18, 0x80, 0xdc, 0x02, 0x80, 0xdc, 0x16,
	0x09, 0x80, 0x87, 0x09, 0x16, 0x80, 0xdd, 0x02, 0x80, 0xdd, 0x14, 0x0a, 0x80, 0x87, 0x0a, 0x14,
	0x80, 0xde, 0x02, 0x80, 0xde, 0x13, 0x09, 0x80, 0x89, 0x09, 0x13, 0x80, 0xdf, 0x02, 0x80, 0xdf,
	0x11, 0x09, 0x80, 0x8b, 0x09, 0x11, 0x80, 0xe0, 0x02, 0x80, 0xe0, 0x10, 0x09, 0x80, 0x8b, 0x09,
	0x10, 0x80, 0xe1, 0x02, 0x80, 0xe2, 0x0d, 0x09, 0x80, 0x8d, 0x09, 0x0d, 0x80, 0xe3, 0x02, 0x80,
	0xe3, 0x0b, 0x09, 0x80, 0x8f, 0x09, 0x0b, 0x80, 0xe4, 0x02, 0x80, 0xe4, 0x0a, 0x09, 0x80, 0x8f,
	0x09, 0x0a, 0x80, 0xe5, 0x02, 0x80, 0xe5, 0x08, 0x09, 0x80, 0x91, 0x09, 0x08, 0x80, 0xe6, 0x02,
	0x80, 0xe6, 0x07, 0x08, 0x80, 0x92, 0x09, 0x07, 0x80, 0xe7, 0x02, 0x80, 0xe7, 0x05, 0x09, 0x80,
	0x93, 0x09, 0x05, 0x80, 0xe8, 0x02, 0x80, 0xe8, 0x04, 0x08, 0x80, 0x95, 0x08, 0x04, 0x80, 0xe9,
	0x02, 0x80, 0xe9, 0x02, 0x09, 0x80, 0x95, 0x09, 0x01, 0x80, 0xeb, 0x02, 0x80, 0xf3, 0x80, 0x97,
	0x80, 0xf4, 0x02, 0x80, 0xf3, 0x80, 0x97, 0x80, 0xf4, 0x02, 0x80, 0xf2, 0x80, 0x99, 0x80, 0xf3,
	0x02, 0x80, 0xf2, 0x80, 0x99, 0x80, 0xf3, 0x02, 0x80, 0xf1, 0x80, 0x9b, 0x80, 0xf2, 0x02, 0x80,
	0xf1, 0x80, 0x9b, 0x80, 0xf2, 0x02, 0x80, 0xf1, 0x80, 0x9b, 0x80, 0xf2, 0x02, 0x80, 0xf0, 0x80,
	0x9d, 0x80, 0xf1, 0x02, 0x80, 0xf0, 0x80, 0x9d, 0x80, 0xf1, 0x02, 0x80, 0xef, 0x80, 0x9f, 0x80,
	0xf0, 0x02, 0x80, 0xef, 0x80, 0x9f, 0x80, 0xf0, 0x02, 0x80, 0xef, 0x80, 0x9f, 0x80, 0xf0, 0x02,
	0x80, 0xee, 0x80, 0xa1, 0x80, 0xef, 0x02, 0x80, 0xee, 0x80, 0xa1, 0x80, 0xef, 0x02, 0x80, 0xee,
	0x80, 0xa1, 0x80, 0xef, 0x02, 0x80, 0xed, 0x80, 0xa3, 0x80, 0xee, 0x02, 0x80, 0xed, 0x80, 0xa3,
	0x80, 0xee, 0x02, 0x80, 0xed, 0x80, 0xa3, 0x80, 0xee, 0x02, 0x80, 0xec, 0x80, 0xa5, 0x80, 0xed,
	0x02, 0x80, 0xec, 0x80, 0xa5, 0x80, 0xed, 0x02, 0x80, 0xec, 0x80, 0xa5, 0x80, 0xed, 0x02, 0x80,
	0xeb, 0x80, 0xa7, 0x80, 0xec, 0x02, 0x80, 0xeb, 0x80, 0xa7, 0x80, 0xec, 0x02, 0x80, 0xeb, 0x2b,
	0x06, 0x45, 0x06, 0x2b, 0x80, 0xec, 0x02, 0x80, 0xeb, 0x26, 0x10, 0x3b, 0x10, 0x26, 0x80, 0xec,
	0x02, 0x80, 0xeb, 0x24, 0x15, 0x35, 0x15, 0x24, 0x80, 0xec, 0x02, 0x80, 0xea, 0x23, 0x19, 0x31,
	0x19, 0x23, 0x80, 0xeb, 0x02, 0x80, 0xea, 0x22, 0x1c, 0x2d, 0x1c, 0x22, 0x80, 0xeb, 0x02, 0x80,
	0xea, 0x20, 0x1f, 0x2b, 0x1f, 0x20, 0x80, 0xeb, 0x02, 0x80, 0xea, 0x1f, 0x21, 0x29, 0x21, 0x1f,
	0x80, 0xeb, 0x02, 0x80, 0xea, 0x1e, 0x23, 0x27, 0x23, 0x1e, 0x80, 0xeb, 0x02, 0x80, 0xe9, 0x1e,
	0x25, 0x25, 0x25, 0x1e, 0x80, 0xea, 0x02, 0x80, 0xe9, 0x1e, 0x26, 0x23, 0x26, 0x1e, 0x80, 0xea,
	0x02, 0x80, 0xe9, 0x1d, 0x27, 0x23, 0x27, 0x1d, 0x80, 0xea, 0x02, 0x80, 0xe9, 0x1c, 0x29, 0x21,
	0x29, 0x1c, 0x80, 0xea, 0x02, 0x80, 0xe9, 0x1b, 0x2b, 0x1f, 0x2b, 0x1b, 0x80, 0xea, 0x02, 0x80,
	0xe9, 0x1b, 0x2b, 0x1f, 0x2b, 0x1b, 0x80, 0xea, 0x02, 0x80, 0xe9, 0x1a, 0x2d, 0x1d, 0x2d, 0x1a,
	0x80, 0xea, 0x02, 0x80, 0xe9, 0x1a, 0x2d, 0x1d, 0x2d, 0x1a, 0x80, 0xea, 0x02, 0x80, 0xe8, 0x1a,
	0x2e, 0x1d, 0x2e, 0x1a, 0x80, 0xe9, 0x02, 0x80, 0xe8, 0x1a, 0x2e, 0x1d, 0x2e, 0x1a, 0x80, 0xe9,
	0x02, 0x80, 0xe8, 0x19, 0x2f, 0x1d, 0x2f, 0x19, 0x80, 0xe9, 0x02, 0x80, 0xe8, 0x19, 0x2f, 0x1d,
	0x2f, 0x19, 0x80, 0xe9, 0x02, 0x80, 0xe8, 0x19, 0x2f, 0x1d, 0x2f, 0x19, 0x80, 0xe9, 0x02, 0x80,
	0xe8, 0x19, 0x2e, 0x1f, 0x2e, 0x19, 0x80, 0xe9, 0x02, 0x80, 0xe8, 0x18, 0x2f, 0x1f, 0x2f, 0x18,
	0x80, 0xe9, 0x02, 0x80, 0xe8, 0x18, 0x2e, 0x21, 0x2e, 0x18, 0x80, 0xe9, 0x02, 0x80, 0xe8, 0x18,
	0x2e, 0x21, 0x2e, 0x18, 0x80, 0xe9, 0x02, 0x80, 0xe8, 0x18, 0x2d, 0x23, 0x2d, 0x18, 0x80, 0xe9,
	0x02, 0x80, 0xe8, 0x18, 0x2c, 0x25, 0x2c, 0x18, 0x80, 0xe9, 0x02, 0x80, 0xe8, 0x18, 0x2b, 0x27,
	0x2b, 0x18, 0x80, 0xe9, 0x02, 0x80, 0xe8, 0x18, 0x2a, 0x29, 0x2a, 0x18, 0x80, 0xe9, 0x02, 0x80,
	0xe8, 0x18, 0x28, 0x2d, 0x28, 0x18, 0x80, 0xe9, 0x02, 0x80, 0xe8, 0x18, 0x27, 0x2f, 0x27, 0x18,
	0x80, 0xe9, 0x02, 0x80, 0xe8, 0x18, 0x25, 0x33, 0x25, 0x18, 0x80, 0xe9, 0x02, 0x80, 0xe8, 0x19,
	0x21, 0x39, 0x21, 0x19, 0x80, 0xe9, 0x02, 0x80, 0xe9, 0x18, 0x1f, 0x3d, 0x1f, 0x18, 0x80, 0xea,
	0x02, 0x80, 0xe9, 0x18, 0x1c, 0x43, 0x1c, 0x18, 0x80, 0xea, 0x02, 0x80, 0xe9, 0x18, 0x1a, 0x47,
	0x1a, 0x18, 0x80, 0xea, 0x02, 0x80, 0xe9, 0x18, 0x18, 0x4b, 0x18, 0x18, 0x80, 0xea, 0x02, 0x80,
	0xe9, 0x19, 0x15, 0x4f, 0x15, 0x19, 0x80, 0xea, 0x02, 0x80, 0xe9, 0x19, 0x13, 0x53, 0x13, 0x19,
	0x80, 0xea, 0x02, 0x80, 0xe9, 0x19, 0x12, 0x55, 0x12, 0x19, 0x80, 0xea, 0x02, 0x80, 0xe9, 0x1a,
	0x10, 0x57, 0x10, 0x1a, 0x80, 0xea, 0x02, 0x80, 0xea, 0x19, 0x0f, 0x59, 0x0f, 0x19, 0x80, 0xeb,
	0x02, 0x80, 0xea, 0x1a, 0x0e, 0x59, 0x0e, 0x1a, 0x80, 0xeb, 0x02, 0x80, 0xea, 0x1b, 0x0d, 0x59,
	0x0d, 0x1b, 0x80, 0xeb, 0x02, 0x80, 0xea, 0x1b, 0x0c, 0x5b, 0x0c, 0x1b, 0x80, 0xeb, 0x02, 0x80,
	0xea, 0x1c, 0x0b, 0x5b, 0x0b, 0x1c, 0x80, 0xeb, 0x02, 0x80, 0xeb, 0x1c, 0x0a, 0x5b, 0x0a, 0x1c,
	0x80, 0xec, 0x02, 0x80, 0xeb, 0x1e, 0x08, 0x5b, 0x08, 0x1e, 0x80, 0xec, 0x02, 0x80, 0xeb, 0x1f,
	0x07, 0x5b, 0x07, 0x1f, 0x80, 0xec, 0x02, 0x80, 0xeb, 0x20, 0x05, 0x2e, 0x01, 0x2e, 0x05, 0x20,
	0x80, 0xec, 0x02, 0x80, 0xeb, 0x22, 0x03, 0x2d, 0x04, 0x2c, 0x03, 0x21, 0x80, 0xed, 0x02, 0x80,
	0xec, 0x50, 0x06, 0x4f, 0x80, 0xed, 0x02, 0x80, 0xec, 0x4f, 0x07, 0x4f, 0x80, 0xed, 0x02, 0x80,
	0xec, 0x4f, 0x08, 0x4e, 0x80, 0xed, 0x02, 0x80, 0xed, 0x4d, 0x09, 0x4d, 0x80, 0xee, 0x02, 0x80,
	0xed, 0x4d, 0x09, 0x4d, 0x80, 0xee, 0x02, 0x80, 0xed, 0x4d, 0x0a, 0x4c, 0x80, 0xee, 0x02, 0x80,
	0xee, 0x4b, 0x0b, 0x4b, 0x80, 0xef, 0x02, 0x80, 0xee, 0x4b, 0x0c, 0x4a, 0x80, 0xef, 0x02, 0x80,
	0xee, 0x4b, 0x0c, 0x4a, 0x80, 0xef, 0x02, 0x80, 0xef, 0x49, 0x0d, 0x49, 0x80, 0xf0, 0x02, 0x80,
	0xef, 0x49, 0x0d, 0x49, 0x80, 0xf0, 0x02, 0x80, 0xef, 0x49, 0x0e, 0x48, 0x80, 0xf0, 0x02, 0x80,
	0xf0, 0x48, 0x0e, 0x47, 0x80, 0xf1, 0x02, 0x80, 0xe6, 0x02, 0x08, 0x47, 0x0f, 0x47, 0x08, 0x02,
	0x80, 0xe7, 0x02, 0x80, 0xe5, 0x04, 0x08, 0x46, 0x0f, 0x46, 0x08, 0x04, 0x80, 0xe6, 0x02, 0x80,
	0xe4, 0x05, 0x08, 0x46, 0x0f, 0x46, 0x08, 0x05, 0x80, 0xe5, 0x02, 0x80, 0xe3, 0x06, 0x08, 0x46,
	0x0f, 0x45, 0x09, 0x06, 0x80, 0xe4, 0x02, 0x80, 0xe2, 0x08, 0x08, 0x45, 0x10, 0x44, 0x08, 0x08,
	0x80, 0xe3, 0x02, 0x80, 0xe1, 0x09, 0x08, 0x44, 0x07, 0x03, 0x07, 0x44, 0x08, 0x09, 0x80, 0xe2,
	0x02, 0x80, 0xe0, 0x0b, 0x08, 0x43, 0x06, 0x05, 0x06, 0x43, 0x08, 0x0b, 0x80, 0xe1, 0x02, 0x80,
	0xde, 0x0d, 0x08, 0x43, 0x05, 0x07, 0x05, 0x43, 0x08, 0x0d, 0x80, 0xdf, 0x02, 0x80, 0xdd, 0x0f,
	0x08, 0x42, 0x05, 0x07, 0x05, 0x42, 0x08, 0x0f, 0x80, 0xde, 0x02, 0x80, 0xdc, 0x10, 0x08, 0x42,
	0x05, 0x07, 0x05, 0x42, 0x08, 0x10, 0x80, 0xdd, 0x02, 0x80, 0xdb, 0x12, 0x08, 0x41, 0x04, 0x09,
	0x04, 0x41, 0x08, 0x12, 0x80, 0xdc, 0x02, 0x80, 0xda, 0x13, 0x09, 0x40, 0x04, 0x09, 0x04, 0x40,
	0x09, 0x13, 0x80, 0xdb, 0x02, 0x80, 0xd9, 0x15, 0x08, 0x40, 0x03, 0x0a, 0x04, 0x40, 0x08, 0x15,
	0x80, 0xda, 0x02, 0x80, 0xd8, 0x16, 0x09, 0x3f, 0x03, 0x0a, 0x03, 0x40, 0x09, 0x16, 0x80, 0xd9,
	0x02, 0x80, 0xd7, 0x18, 0x08, 0x40, 0x02, 0x0b, 0x02, 0x40, 0x08, 0x18, 0x80, 0xd8, 0x02, 0x80,
	0xd5, 0x1a, 0x09, 0x4c, 0x01, 0x40, 0x09, 0x1a, 0x80, 0xd6, 0x02, 0x80, 0xd4, 0x1c, 0x09, 0x80,
	0x8b, 0x09, 0x1c, 0x80, 0xd5, 0x02, 0x80, 0xd3, 0x1d, 0x09, 0x80, 0x8b, 0x09, 0x1d, 0x80, 0xd4,
	0x02, 0x80, 0xd2, 0x1f, 0x09, 0x80, 0x89, 0x09, 0x1f, 0x80, 0xd3, 0x02, 0x80, 0xd1, 0x21, 0x09,
	0x80, 0x87, 0x09, 0x21, 0x80, 0xd2, 0x02, 0x80, 0xd0, 0x22, 0x09, 0x80, 0x87, 0x09, 0x22, 0x80,
	0xd1, 0x02, 0x80, 0xcf, 0x24, 0x09, 0x80, 0x85, 0x09, 0x24, 0x80, 0xd0, 0x02, 0x80, 0xcd, 0x27,
	0x09, 0x80, 0x83, 0x09, 0x27, 0x80, 0xce, 0x02, 0x80, 0xcc, 0x28, 0x0a, 0x80, 0x81, 0x0a, 0x28,
	0x80, 0xcd, 0x02, 0x80, 0xcb, 0x2a, 0x0a, 0x7f, 0x0a, 0x2a, 0x80, 0xcc, 0x02, 0x80, 0xca, 0x2c,
	0x09, 0x7f, 0x09, 0x2c, 0x80, 0xcb, 0x02, 0x80, 0xc9, 0x2e, 0x09, 0x7d, 0x09, 0x2e, 0x80, 0xca,
	0x02, 0x80, 0xc8, 0x2f, 0x0a, 0x7b, 0x0a, 0x2f, 0x80, 0xc9, 0x02, 0x80, 0xb4, 0x07, 0x0c, 0x31,
	0x0a, 0x79, 0x0a, 0x31, 0x0c, 0x07, 0x80, 0xb5, 0x02, 0x80, 0xad, 0x15, 0x04, 0x33, 0x0a, 0x77,
	0x0a, 0x33, 0x04, 0x15, 0x80, 0xae, 0x02, 0x80, 0xa9, 0x51, 0x0a, 0x75, 0x0a, 0x51, 0x80, 0xaa,
	0x02, 0x80, 0xa7, 0x54, 0x0a, 0x73, 0x0a, 0x54, 0x80, 0xa8, 0x02, 0x80, 0xa4, 0x58, 0x0a, 0x71,
	0x0a, 0x58, 0x80, 0xa5, 0x02, 0x80, 0xa2, 0x5a, 0x0b, 0x6f, 0x0b, 0x5a, 0x80, 0xa3, 0x02, 0x80,
	0xa0, 0x5d, 0x0b, 0x6d, 0x0b, 0x5d, 0x80, 0xa1, 0x02, 0x80, 0x9f, 0x5f, 0x0b, 0x6b, 0x0b, 0x5f,
	0x80, 0xa0, 0x02, 0x80, 0x9d, 0x62, 0x0b, 0x69, 0x0b, 0x62, 0x80, 0x9e, 0x02, 0x80, 0x9c, 0x64,
	0x0c, 0x65, 0x0c, 0x64, 0x80, 0x9d, 0x02, 0x80, 0x9b, 0x66, 0x0c, 0x63, 0x0c, 0x66, 0x80, 0x9c,
	0x02, 0x80, 0x99, 0x69, 0x0b, 0x62, 0x0c, 0x69, 0x80, 0x9a, 0x02, 0x80, 0x98, 0x6b, 0x0a, 0x63,
	0x0a, 0x6b, 0x80, 0x99, 0x02, 0x80, 0x97, 0x6b, 0x0a, 0x64, 0x0b, 0x6b, 0x80, 0x98, 0x02, 0x80,
	0x96, 0x6a, 0x0c, 0x65, 0x0c, 0x6a, 0x80, 0x97, 0x02, 0x80, 0x95, 0x6a, 0x0d, 0x65, 0x0d, 0x6a,
	0x80, 0x96, 0x02, 0x80, 0x94, 0x6a, 0x0e, 0x65, 0x0e, 0x6a, 0x80, 0x95, 0x02, 0x80, 0x93, 0x6a,
	0x0e, 0x66, 0x0f, 0x6a, 0x80, 0x94, 0x02, 0x80, 0x93, 0x69, 0x0f, 0x21, 0x02, 0x21, 0x02, 0x21,
	0x0f, 0x69, 0x80, 0x94, 0x02, 0x80, 0x92, 0x69, 0x10, 0x21, 0x02, 0x21, 0x02, 0x21, 0x10, 0x69,
	0x80, 0x93, 0x02, 0x80, 0x91, 0x69, 0x11, 0x21, 0x02, 0x21, 0x02, 0x21, 0x11, 0x69, 0x80, 0x92,
	0x02, 0x80, 0x91, 0x68, 0x12, 0x21, 0x02, 0x21, 0x02, 0x21, 0x12, 0x68, 0x80, 0x92, 0x02, 0x80,
	0x90, 0x67, 0x14, 0x21, 0x02, 0x21, 0x02, 0x21, 0x14, 0x67, 0x80, 0x91, 0x02, 0x80, 0x8f, 0x67,
	0x16, 0x20, 0x03, 0x1f, 0x04, 0x1f, 0x16, 0x67, 0x80, 0x90, 0x02, 0x80, 0x8f, 0x66, 0x17, 0x20,
	0x03, 0x1f, 0x04, 0x1f, 0x17, 0x66, 0x80, 0x90, 0x02, 0x80, 0x8e, 0x66, 0x18, 0x1f, 0x04, 0x1f,
	0x04, 0x1f, 0x18, 0x66, 0x80, 0x8f, 0x02, 0x80, 0x8e, 0x65, 0x1a, 0x1e, 0x04, 0x1f, 0x04, 0x1f,
	0x19, 0x65, 0x80, 0x8f, 0x02, 0x80, 0x8d, 0x65, 0x1b, 0x1d, 0x06, 0x1d, 0x06, 0x1d, 0x1b, 0x65,
	0x80, 0x8e, 0x02, 0x80, 0x8d, 0x64, 0x1d, 0x1c, 0x06, 0x1d, 0x06, 0x1d, 0x1c, 0x64, 0x80, 0x8e,
	0x02, 0x80, 0x8d, 0x1a, 0x02, 0x47, 0x1e, 0x1b, 0x08, 0x1b, 0x08, 0x1b, 0x1e, 0x47, 0x02, 0x1a,
	0x80, 0x8e, 0x02, 0x80, 0x8c, 0x19, 0x05, 0x44, 0x21, 0x19, 0x0a, 0x19, 0x0a, 0x19, 0x21, 0x44,
	0x05, 0x19, 0x80, 0x8d, 0x02, 0x80, 0x8c, 0x18, 0x07, 0x42, 0x23, 0x18, 0x0b, 0x17, 0x0c, 0x17,
	0x23, 0x42, 0x07, 0x18, 0x80, 0x8d, 0x02, 0x80, 0x8b, 0x18, 0x09, 0x40, 0x25, 0x16, 0x0d, 0x15,
	0x0e, 0x15, 0x25, 0x40, 0x09, 0x18, 0x80, 0x8c, 0x02, 0x80, 0x8b, 0x17, 0x0b, 0x3e, 0x27, 0x13,
	0x10, 0x13, 0x10, 0x13, 0x27, 0x3e, 0x0b, 0x17, 0x80, 0x8c, 0x02, 0x80, 0x8b, 0x16, 0x0d, 0x3c,
	0x2a, 0x10, 0x12, 0x11, 0x12, 0x11, 0x29, 0x3c, 0x0d, 0x16, 0x80, 0x8c, 0x02, 0x80, 0x8b, 0x15,
	0x0f, 0x3a, 0x2d, 0x0c, 0x17, 0x0b, 0x18, 0x0b, 0x2d, 0x3a, 0x0f, 0x15, 0x80, 0x8c, 0x02, 0x80,
	0x8a, 0x15, 0x11, 0x38, 0x32, 0x04, 0x1e, 0x05, 0x1e, 0x05, 0x31, 0x38, 0x11, 0x15, 0x80, 0x8b,
	0x02, 0x80, 0x8a, 0x14, 0x12, 0x37, 0x80, 0xaf, 0x37, 0x12, 0x14, 0x80, 0x8b, 0x02, 0x80, 0x8a,
	0x12, 0x15, 0x34, 0x80, 0xb3, 0x34, 0x15, 0x12, 0x80, 0x8b, 0x02, 0x80, 0x8a, 0x11, 0x17, 0x33,
	0x80, 0xb3, 0x33, 0x17, 0x11, 0x80, 0x8b, 0x02, 0x80, 0x8a, 0x10, 0x19, 0x32, 0x80, 0xb3, 0x32,
	0x19, 0x10, 0x80, 0x8b, 0x02, 0x80, 0x8a, 0x0f, 0x1b, 0x31, 0x80, 0xb3, 0x31, 0x1b, 0x0f, 0x80,
	0x8b, 0x02, 0x80, 0x89, 0x0f, 0x1d, 0x31, 0x80, 0xb1, 0x31, 0x1d, 0x0f, 0x80, 0x8a, 0x02, 0x80,
	0x89, 0x0e, 0x1f, 0x30, 0x80, 0xb1, 0x30, 0x1f, 0x0e, 0x80, 0x8a, 0x02, 0x80, 0x89, 0x0d, 0x21,
	0x2f, 0x80, 0xb1, 0x2f, 0x21, 0x0d, 0x80, 0x8a, 0x02, 0x80, 0x89, 0x0c, 0x23, 0x2e, 0x80, 0xb1,
	0x2e, 0x23, 0x0c, 0x80, 0x8a, 0x02, 0x80, 0x89, 0x0a, 0x26, 0x2d, 0x80, 0xb1, 0x2d, 0x26, 0x0a,
	0x80, 0x8a, 0x02, 0x80, 0x89, 0x09, 0x27, 0x2d, 0x80, 0xb1, 0x2d, 0x27, 0x09, 0x80, 0x8a, 0x02,
	0x80, 0x89, 0x08, 0x29, 0x2c, 0x80, 0xb1, 0x2c, 0x29, 0x08, 0x80, 0x8a, 0x02, 0x80, 0x89, 0x07,
	0x2b, 0x2b, 0x80, 0xb1, 0x2b, 0x2b, 0x07, 0x80, 0x8a, 0x02, 0x80, 0x89, 0x06, 0x2d, 0x2a, 0x80,
	0xb1, 0x2a, 0x2d, 0x06, 0x80, 0x8a, 0x02, 0x80, 0x8a, 0x04, 0x2f, 0x28, 0x80, 0xb3, 0x28, 0x2f,
	0x04, 0x80, 0x8b, 0x02, 0x80, 0x8a, 0x03, 0x31, 0x27, 0x80, 0xb3, 0x27, 0x31, 0x03, 0x80, 0x8b,
	0x02, 0x80, 0x8a, 0x02, 0x33, 0x26, 0x80, 0xb3, 0x26, 0x33, 0x02, 0x80, 0x8b, 0x02, 0x80, 0xc0,
	0x25, 0x80, 0xb3, 0x25, 0x80, 0xc1, 0x02, 0x80, 0xc1, 0x24, 0x80, 0xb3, 0x24, 0x80, 0xc2, 0x02,
	0x80, 0xc2, 0x23, 0x80, 0xb3, 0x23, 0x80, 0xc3, 0x02, 0x80, 0xc3, 0x21, 0x80, 0xb5, 0x21, 0x80,
	0xc4, 0x02, 0x80, 0xc3, 0x21, 0x80, 0xb5, 0x21, 0x80, 0xc4, 0x02, 0x80, 0xc4, 0x20, 0x80, 0xb5,
	0x20, 0x80, 0xc5, 0x02, 0x80, 0xc5, 0x1e, 0x80, 0xb7, 0x1e, 0x80, 0xc6, 0x02, 0x80, 0xc6, 0x1d,
	0x80, 0xb7, 0x1d, 0x80, 0xc7, 0x02, 0x80, 0xc7, 0x1c, 0x80, 0xb7, 0x1c, 0x80, 0xc8, 0x02, 0x80,
	0xc8, 0x1a, 0x80, 0xb9, 0x1a, 0x80, 0xc9, 0x02, 0x80, 0xc8, 0x1a, 0x80, 0xb9, 0x1a, 0x80, 0xc9,
	0x02, 0x80, 0xc7, 0x1b, 0x80, 0xb9, 0x1b, 0x80, 0xc8, 0x02, 0x80, 0xc5, 0x1c, 0x80, 0xbb, 0x1c,
	0x80, 0xc6, 0x02, 0x80, 0xc4, 0x1d, 0x80, 0xbb, 0x1d, 0x80, 0xc5, 0x02, 0x80, 0xc3, 0x1d, 0x80,
	0xbd, 0x1d, 0x80, 0xc4, 0x02, 0x80, 0xc2, 0x1d, 0x80, 0xbf, 0x1d, 0x80, 0xc3, 0x02, 0x80, 0xc1,
	0x1e, 0x80, 0xbf, 0x1e, 0x80, 0xc2, 0x02, 0x80, 0xc0, 0x1e, 0x80, 0xc1, 0x1e, 0x80, 0xc1, 0x02,
	0x80, 0xbf, 0x1f, 0x80, 0xc1, 0x1f, 0x80, 0xc0, 0x02, 0x80, 0xbe, 0x1f, 0x80, 0xc3, 0x1f, 0x80,
	0xbf, 0x02, 0x80, 0xbc, 0x20, 0x80, 0xc5, 0x20, 0x80, 0xbd, 0x02, 0x80, 0xbb, 0x20, 0x80, 0xc7,
	0x20, 0x80, 0xbc, 0x02, 0x80, 0xba, 0x20, 0x80, 0xc9, 0x20, 0x80, 0xbb, 0x02, 0x80, 0xb9, 0x21,
	0x80, 0xc9, 0x21, 0x80, 0xba, 0x02, 0x80, 0xb8, 0x21, 0x80, 0xcb, 0x21, 0x80, 0xb9, 0x02, 0x80,
	0xb7, 0x21, 0x80, 0xcd, 0x21, 0x80, 0xb8, 0x02, 0x80, 0xb6, 0x21, 0x80, 0xcf, 0x21, 0x80, 0xb7,
	0x02, 0x80, 0xb5, 0x20, 0x80, 0xd3, 0x20, 0x80, 0xb6, 0x02, 0x80, 0xb3, 0x21, 0x80, 0xd5, 0x21,
	0x80, 0xb4, 0x02, 0x80, 0xb2, 0x21, 0x80, 0xd7, 0x21, 0x80, 0xb3, 0x02, 0x80, 0xb1, 0x21, 0x80,
	0xd9, 0x21, 0x80, 0xb2, 0x02, 0x80, 0xb0, 0x20, 0x80, 0xdd, 0x20, 0x80, 0xb1, 0x02, 0x80, 0xaf,
	0x1f, 0x80, 0xe1, 0x1f, 0x80, 0xb0, 0x02, 0x80, 0xae, 0x1f, 0x80, 0xe3, 0x1f, 0x80, 0xaf, 0x02,
	0x80, 0xad, 0x1d, 0x80, 0xe8, 0x1e, 0x80, 0xae, 0x02, 0x80, 0xac, 0x1c, 0x80, 0xed, 0x1c, 0x80,
	0xad, 0x02, 0x80, 0xab, 0x1a, 0x80, 0xf3, 0x1a, 0x80, 0xac, 0x02, 0x80, 0xae, 0x13, 0x80, 0xfb,
	0x13, 0x80, 0xaf, 0x02, 0x80, 0xb4, 0x07, 0x81, 0x07, 0x07, 0x80, 0xb5, 0x02, 0x82, 0x7e, 0x02,
	0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82,
	0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e,
	0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02,
	0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82,
	0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e,
	0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02,
	0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82,
	0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e,
	0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02,
	0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82,
	0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e,
	0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02,
	0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82,
	0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x02, 0x82, 0x7e, 0x82, 0x81,
};

// Compressed RLE size 3900

void drawRLE()
{
	// pseudo-code for cheesy RLE
	// start with color1
	// while more input data remaining
	// 	count =  0nnnnnnn = 1 byte or 1nnnnnnn nnnnnnnn 2 bytes (0 - 32767)
	// 	repeat color count times
	// 	toggle color1/color2

	uint32_t	cnt = 0;
	int			color = 1;
	int			curcolor = 0;
	int			x = 0, y = 0;

	const uint8_t *cmp = &HaDLogo[0];

	while (cmp < &HaDLogo[sizeof(HaDLogo)])
	{
		cnt = *cmp++;
		if (cnt & 0x80)
			cnt = ((cnt & 0x7f) << 8) | *cmp++;

		while (cnt--)
		{
			plot(x, y, curcolor ? (((x>>1)+(y))) & 0xff : 0x00);

			if (++x >= 640)
			{
				x = 0;
				if (++y >= 480)
					y = 0;
			}
		}

		curcolor ^= color;
	}
}

#endif