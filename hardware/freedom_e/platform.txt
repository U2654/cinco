name= SiFive Freedom E300 Boards
version=1.6.0

# Compile variables
# ----------------------

compiler.path=
compiler.c.cmd=riscv32-unknown-elf-gcc
compiler.cpp.cmd=riscv32-unknown-elf-g++
compiler.ld.cmd=riscv32-unknown-elf-ld
compiler.ar.cmd=riscv32-unknown-elf-ar
compiler.objcopy.cmd=riscv32-unknown-elf-objcopy
compiler.elf2hex.cmd=riscv32-unknown-elf-objcopy
compiler.size.cmd=riscv32-unknown-elf-size

compiler.c.flags=-c -Os -m32 -msoft-float -fpeel-loops \
		    -ffreestanding -ffunction-sections \
		    -fdata-sections -Wall -nostdinc "-I{build.system.path}/include" \
		    -include sys/param.h -include sys/stdint.h

compiler.cpp.flags=-c -Os -m32 -msoft-float -fpeel-loops -ffreestanding \
		      -ffunction-sections -fdata-sections -fpermissive \
		      -Wall -nostdinc "-I{build.system.path}/include" \
		      -include sys/param.h -fno-rtti  -fno-exceptions \
		      -include sys/stdint.h

compiler.ld.flags=-T {build.system.path}/riscv/lib/ldscripts/freedom-e300-flash.ld \
		     -N -EL -melf32lriscv \
		     --gc-sections "--library-path={build.system.path}/riscv/lib"

compiler.S.flags=-c -g -x assembler-with-cpp

compiler.ar.flags=rcs

compiler.objcopy.eep.flags=-O srec

compiler.elf2hex.flags=-R .rel.dyn

compiler.define=-DARDUINO=

# this can be overriden in boards.txt
build.extra_flags=

# recommended sdata sizes
# small RAM <64K: 32768
# large RAM >64K: 4096
build.sdata.size=32768

# These can be overridden in platform.local.txt

compiler.c.extra_flags=-DF_CPU={build.f_cpu}L
compiler.c.elf.extra_flags=
compiler.cpp.extra_flags=-DF_CPU={build.f_cpu}L
compiler.ar.extra_flags=
compiler.elf2hex.extra_flags=

# USB Flags
# ---------
build.usb_flags=

# Compile patterns
# ---------------------

## Compile S files
recipe.S.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} -DARDUINO={runtime.ide.version} {compiler.c.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Compile c files
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} -DARDUINO={runtime.ide.version} {compiler.c.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Compile c++ files
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} -DARDUINO={runtime.ide.version} {compiler.cpp.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Create archives
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} "{archive_file_path}" "{object_file}"

## Link gc-sections, archives, and objects
recipe.c.combine.pattern="{compiler.path}{compiler.ld.cmd}" {compiler.ld.flags} -nostdlib {build.extra_flags} -lcrt0f {object_files} "{build.path}/{archive_file}" -lm -lc -o "{build.path}/{build.project_name}.elf"

#recipe.c.combine.pattern="{compiler.path}{compiler.ld.cmd}" {compiler.ld.flags} -nostdlib {compiler.ld.extra_flags} -lcrt0 {object_files} "{archive_file_path}" -lm -lc -o "{build.path}/{build.project_name}.elf"

## Create binary
recipe.objcopy.eep.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.flags} -O binary "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.bin"

## Create hex
recipe.objcopy.hex.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.flags} -O srec "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.hex"

## Compute size
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -B "{build.path}/{build.project_name}.elf"
recipe.size.regex=\s*[0-9]+\s+[0-9]+\s+[0-9]+\s+([0-9]+).*


# Uploader tools
# -------------------

tools.lsketch.path=
tools.lsketch.cmd.path=openocd_lsketch
tools.lsketch.upload.params.verbose=-v
tools.lsketch.upload.params.quiet=-q
tools.lsketch.program.params.verbose=-v
tools.lsketch.program.params.quiet=-q
tools.lsketch.program.pattern="{cmd.path}" "{build.path}/{build.project_name}.elf"
tools.lsketch.upload.pattern="{cmd.path}" "{build.path}/{build.project_name}.elf"

